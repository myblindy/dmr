<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<#	
	var damagetypes = new (string name, string configname, bool canresist)[] 
	{ 
		("Slashing", "slashing", true), 
		("Piercing", "piercing", false), 
		("Crushing", "crushing", true), 
		("Fire", "fire", true), 
		("Shadow", "shadow", true), 
	}; 
#>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using System.Text.RegularExpressions;

using BaseType = System.SByte;

namespace dmr.Models.General
{
    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    public struct AttackTemplate
    {
		<# foreach(var damagetype in damagetypes) { #>
			public BaseType <#= damagetype.name #>;
		<# } #>

		public void UpdateFromConfiguration(string value)
		{
			var m = Regex.Match(value, @"^\s*(-?\s*\d+)\s+(\w+)\s*$");

			switch(m.Groups[2].Value)
			{
				<# foreach(var damagetype in damagetypes) { #>
					case "<#= damagetype.configname #>":
						<#= damagetype.name #> = BaseType.Parse(m.Groups[1].Value);
						break;
				<# } #>
				default: throw new InvalidOperationException();
			}
		}
	}

    [StructLayout(LayoutKind.Sequential, Pack = 1)]
	public struct ResistsTemplate
	{
		<# foreach(var damagetype in damagetypes.Where(w => w.canresist)) { #>
			public BaseType <#= damagetype.name #>;
		<# } #>

		public void UpdateFromConfiguration(string value)
		{
			var m = Regex.Match(value, @"^\s*(-?\s*\d+)\s+(\w+)\s*$");

			switch(m.Groups[2].Value)
			{
				<# foreach(var damagetype in damagetypes.Where(w => w.canresist)) { #>
					case "<#= damagetype.configname #>":
						<#= damagetype.name #> = BaseType.Parse(m.Groups[1].Value);
						break;
				<# } #>
				default: throw new InvalidOperationException();
			}
		}
	}
}
